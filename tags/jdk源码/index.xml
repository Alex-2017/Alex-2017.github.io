<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JDK源码 on BaseC的博客</title>
    <link>https://wangjc95.com/tags/jdk%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in JDK源码 on BaseC的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 15 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wangjc95.com/tags/jdk%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LinkedList源码分析-JDK1.8</title>
      <link>https://wangjc95.com/post/23-linkedlist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-jdk1.8/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wangjc95.com/post/23-linkedlist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-jdk1.8/</guid>
      <description>1.概述 LinkedList是基于双向链表来编写的，不需要考虑容量的问题，但节点需要额外的空间存储前驱和后继的引用。有序可重复，可存储null值，非线程安全。
1.1继承体系 LinkedList实现了Deque接口，这样LinkedList就具备了双端队列的功能，本文旨在介绍LinkedList的List功能，队列功能不再进行说明。
LinkedList没有实现RandomAccess接口，所以不要通过访问下标方式（for(int i=0;i&amp;lt;size;i++)）遍历，否则效率极差。
2.源码分析 本文主要针对LinkedList的常用操作进行分析，代码如下。
List&amp;lt;String&amp;gt; linkedList = new LinkedList&amp;lt;&amp;gt;(); //add(E e) linkedList.</description>
    </item>
    
    <item>
      <title>ArrayList源码分析-JDK1.8</title>
      <link>https://wangjc95.com/post/21-arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-jdk1.8/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wangjc95.com/post/21-arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-jdk1.8/</guid>
      <description>1.概述 ArrayList本质上是一个数组,它内部通过对数组的操作实现了List功能,所以ArrayList又被叫做动态数组.每个ArrayList实例都有容量,会自动扩容.它可添加null,有序可重复,线程不安全.Vector和ArrayList内部实现基本是一致的,除了Vector添加了synchronized保证其线程安全.
1.1继承体系 2.源码解析 2.1属性 /** * 默认初始容量 */ private static final int DEFAULT_CAPACITY = 10; /** * 初始容量为0时,elementData指向此对象(空元素对象) */ private static final Object[] EMPTY_ELEMENTDATA = {}; /** * 调用ArrayList()构造方法时,elementData指向此对象(默认容量空元素对象) */ private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; /** * 用于存储集合元素,非private类型能够简化内部类的访问(在编译阶段) */ transient Object[] elementData; /** * 包含的元素个数 */ private int size; 为什么DEFAULT_CAPACITY这种变量为什么要声明为private static final类型</description>
    </item>
    
  </channel>
</rss>